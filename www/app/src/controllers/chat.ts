// The submit controller is used to send the messages to the server and receive the response.
import axios, { AxiosResponse } from "axios";

// The ChatSettings is used to define settings for the user's chat sessions. This is used to
// create custom chat systems for each user and is kept in the browser's local storage.
export type ChatSettings = {
  username: string; // The name of the user
  botname: string; // The name of the bot
  instruction?: string; // An instruction of what the AI should do
  acknowledge?: string; // An acknowledgement of what the AI does
};

// An enum for the status of the chat system
export enum Status {
  Running = "running", // The chat system is busy
  Loading = "loading", // The chat system is loading
  Standby = "standby", // The chat system is accepting messages
  Offline = "offline", // The chat system is offline
  Error = "error", // The chat system has encountered an error
}

// The ChatState is used to define the structure of the status of the chat system.
export type ChatSystem = {
  status: Status; // The status of the chat system
  model?: string; // The name of the model being used
};

// An enum for the role of the message sender
export enum Role {
  User = "user",
  Assistant = "assistant",
}

// The ChatMessage is used to define the structure of the messages.
export interface ChatMessage {
  role: Role; // The chat role (either 'user' or 'assistant')
  timestamp: number; // The timestamp in milliseconds since the Unix Epoch
  content: string; // The main message typed by the user or generated by the server
  thread_id?: string; // To retrieve any ongoing conversation
}

// The ChatResponse is used to define the structure of the response from the server.
export interface ChatResponse extends ChatMessage {
  thread_id: string; // Provide the thread_id to continue the conversation
  source?: string; // The backend source of the message
  runtime?: number; // The runtime of the AI in seconds
}

// The ChatRequest is used to define the structure of the request to the server.
export interface ChatRequest extends ChatMessage {
  settings: ChatSettings; // The config of the user's chat session
  memory: ChatMessage[]; // The memory of the AI
  fileContent: string; // This is used to represent any possible file content
}

// Submit a new chat message to the server via a POST request.
export async function submitRequest(request: ChatRequest) {
  const response = await axios.post<ChatRequest, AxiosResponse<ChatResponse>>(
    "/api/chat",
    request,
    {
      headers: {
        "Content-Type": "application/json",
      },
    }
  );
  return response.data;
}

// getCurrentSystem of the chat system from the server via a GET request.
export async function getCurrentSystem() {
  const response = await axios.get<ChatSystem>("/api/chat/state");
  return response.data;
}

// setChatModel of the chat system from the server via a POST request.
export async function setChatModel(model: string) {
  await axios.post("/api/chat/state", { model });
}
